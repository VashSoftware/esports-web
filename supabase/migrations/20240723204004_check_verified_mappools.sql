create table "public"."quick_queue" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "position" integer,
    "team_id" bigint not null
);


alter table "public"."quick_queue" enable row level security;

alter table "public"."map_pools" add column "recommended_best_of" integer not null default 7;

alter table "public"."map_pools" add column "verified" boolean not null default false;

alter table "public"."maps" alter column "star_rating" set not null;

alter table "public"."user_ratings" add column "game_id" bigint not null;

CREATE UNIQUE INDEX solo_queue_pkey ON public.quick_queue USING btree (id);

CREATE UNIQUE INDEX solo_queue_position_key ON public.quick_queue USING btree ("position");

alter table "public"."quick_queue" add constraint "solo_queue_pkey" PRIMARY KEY using index "solo_queue_pkey";

alter table "public"."quick_queue" add constraint "solo_queue_position_key" UNIQUE using index "solo_queue_position_key";

alter table "public"."quick_queue" add constraint "solo_queue_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) not valid;

alter table "public"."quick_queue" validate constraint "solo_queue_team_id_fkey";

alter table "public"."user_ratings" add constraint "user_ratings_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(id) not valid;

alter table "public"."user_ratings" validate constraint "user_ratings_game_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_closest_map_pool_id(average_star_rating real)
 RETURNS real
 LANGUAGE plpgsql
AS $function$DECLARE
    closest_avg_star_rating float4;
    closest_map_pool_id int;
BEGIN
    SELECT 
        mp.id,
        AVG(m.star_rating) AS average_star_rating
    INTO 
        closest_map_pool_id,
        closest_avg_star_rating
    FROM 
        map_pools mp
    JOIN 
        map_pool_maps mpm ON mp.id = mpm.map_pool_id
    JOIN 
        maps m ON mpm.map_id = m.id
    WHERE mp.verified = true
    GROUP BY 
        mp.id
    ORDER BY 
        ABS(AVG(m.star_rating) - closest_avg_star_rating)
    LIMIT 1;

    RETURN closest_map_pool_id;
END;$function$
;

grant delete on table "public"."quick_queue" to "anon";

grant insert on table "public"."quick_queue" to "anon";

grant references on table "public"."quick_queue" to "anon";

grant select on table "public"."quick_queue" to "anon";

grant trigger on table "public"."quick_queue" to "anon";

grant truncate on table "public"."quick_queue" to "anon";

grant update on table "public"."quick_queue" to "anon";

grant delete on table "public"."quick_queue" to "authenticated";

grant insert on table "public"."quick_queue" to "authenticated";

grant references on table "public"."quick_queue" to "authenticated";

grant select on table "public"."quick_queue" to "authenticated";

grant trigger on table "public"."quick_queue" to "authenticated";

grant truncate on table "public"."quick_queue" to "authenticated";

grant update on table "public"."quick_queue" to "authenticated";

grant delete on table "public"."quick_queue" to "service_role";

grant insert on table "public"."quick_queue" to "service_role";

grant references on table "public"."quick_queue" to "service_role";

grant select on table "public"."quick_queue" to "service_role";

grant trigger on table "public"."quick_queue" to "service_role";

grant truncate on table "public"."quick_queue" to "service_role";

grant update on table "public"."quick_queue" to "service_role";

create policy "Enable delete for authenticated users only"
on "public"."quick_queue"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."quick_queue"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."quick_queue"
as permissive
for select
to public
using (true);


create policy "Enable update for authenticated users only"
on "public"."quick_queue"
as permissive
for update
to authenticated
using (true);



